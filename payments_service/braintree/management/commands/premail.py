import codecs
import functools
import logging
import os

from premailer import Premailer

from django.conf import settings
from django.core.management.base import BaseCommand
from django.template.loader import get_template

log = logging.getLogger(__name__)

root = os.path.join(settings.BASE_DIR, 'braintree/templates/braintree/emails')
join = functools.partial(os.path.join, root)

header_file = join('subscription_header.html')
footer_file = join('subscription_footer.html')
files = [
    join('subscription_charged_successfully.html'),
]


def post_transform(result):
    # Using {{ }} in a url(..) triggers error in cssutils:
    #  Missing token for production Choice(...
    # This fixes up the HTML after.
    result = result.replace('http://placeholder', '{{ product.img }}')
    return result


def get_template_source(filename):
    # A crude way to join the headers and footers together before premailing
    # that avoids some silly django template gymnastics.
    header = codecs.open(header_file, 'r', encoding='utf-8')
    main = codecs.open(filename, 'r', encoding='utf-8')
    footer = codecs.open(footer_file, 'r', encoding='utf-8')
    return header.read() + main.read() + footer.read()


def get_email(filename, premailed='no'):
    """
    Returns the email as a string.

    * premailed: one of the following: 'no', 'stored', 'regenerate'
        * no: do no use any stored premailed HTML or regenerate any
        * stored: use the existing stored premailed HTML
        * regenerate: ignore the stored HTML and regenerate it

    By default:
        * the debug web view, calls `regenerate` or `no` for testing.
        * the management command calls `regenerate`.
        * the email calls `stored`.
    """
    if premailed == 'stored':
        filename = filename.replace('.html', '.premailed.html')
        return get_template('braintree/emails/' + filename)

    if not filename.startswith('/'):
        filename = join(filename)

    source = get_template_source(filename)
    if premailed == 'regenerate':
        log.warning('HTML being processed through premailer using: {}'
                    .format(settings.EMAIL_URL_ROOT))
        p = Premailer(
            html=source,
            preserve_internal_links=True,
            exclude_pseudoclasses=False,
            keep_style_tags=False,
            include_star_selectors=True,
            remove_classes=False,
            strip_important=False,
            method='html',
            base_path=settings.EMAIL_URL_ROOT,
            base_url=settings.EMAIL_URL_ROOT,
            disable_basic_attributes=[],
            disable_validation=True
        )
        source = p.transform(pretty_print=True)

    source = post_transform(source)
    return source


class Command(BaseCommand):

    """
    Generate stored templates suitable for emailing for each HTML template.

    Each resulting template can then be checked into github.
    """

    def handle(self, *args, **options):
        for filename in files:
            if not os.path.exists(filename):
                raise ValueError('Missing file: {}'.format(filename))

            outfilename = filename.replace('.html', '.premailed.html')
            outfile = codecs.open(outfilename, 'w', encoding='utf-8')

            source = get_email(filename, premailed='regenerate')
            source = (
                '{# Warning this file is automatically generated by '
                'the premail command. #}\n' + source)
            outfile.write(source)
